#pragma once

class Solution
{
public:
	Int64 SelectHint;
	Int64 CancelHint;

private://member
	TileValue m_Tile_Select;
	TileValue m_Tile_Block;
	int m_Tile_length;
	int* m_Answer;
	int m_Answer_Length;
	vector<int> m_Spaces;

public://method
	Solution(TileValue select, TileValue block,  int length, int* answer, int count);
private:
	bool IsValidAnswers();
	bool FindSpace(int& start, int& end);
	void Solve(
		int space_index, int answer_start,
		Int64 result_select, Int64 result_cancel);
	bool CheckSpacing(int space_index, int answer_start, int answer_end);
	void GetOverlapedTile(
		int space_index, const int& space_end,
		int answer_index, const int& answer_end,
		Int64 crnt, const Int64& bitmask,
		Int64& result_select, Int64& result_cancel);
	int AnswerTotalSize(int answer_start, int answer_end);

private://util
	bool FFSLL(Int64 value, int& index);
	bool FLSLL(Int64 value, int& index);
};

static const Int64 FILL = 18446744073709551615ULL;
static const Int64 EMPTY = 0;

static const Int64 PLUSTABLE[] = {
		18446744073709551615ULL,		18446744073709551614ULL,		18446744073709551612ULL,		18446744073709551608ULL,
		18446744073709551600ULL,		18446744073709551584ULL,		18446744073709551552ULL,		18446744073709551488ULL,
		18446744073709551360ULL,		18446744073709551104ULL,		18446744073709550592ULL,		18446744073709549568ULL,
		18446744073709547520ULL,		18446744073709543424ULL,		18446744073709535232ULL,		18446744073709518848ULL,
		18446744073709486080ULL,		18446744073709420544ULL,		18446744073709289472ULL,		18446744073709027328ULL,
		18446744073708503040ULL,		18446744073707454464ULL,		18446744073705357312ULL,		18446744073701163008ULL,
		18446744073692774400ULL,		18446744073675997184ULL,		18446744073642442752ULL,		18446744073575333888ULL,
		18446744073441116160ULL,		18446744073172680704ULL,		18446744072635809792ULL,		18446744071562067968ULL,
		18446744069414584320ULL,		18446744065119617024ULL,		18446744056529682432ULL,		18446744039349813248ULL,
		18446744004990074880ULL,		18446743936270598144ULL,		18446743798831644672ULL,		18446743523953737728ULL,
		18446742974197923840ULL,		18446741874686296064ULL,		18446739675663040512ULL,		18446735277616529408ULL,
		18446726481523507200ULL,		18446708889337462784ULL,		18446673704965373952ULL,		18446603336221196288ULL,
		18446462598732840960ULL,		18446181123756130304ULL,		18445618173802708992ULL,		18444492273895866368ULL,
		18442240474082181120ULL,		18437736874454810624ULL,		18428729675200069632ULL,		18410715276690587648ULL,
		18374686479671623680ULL,		18302628885633695744ULL,		18158513697557839872ULL,		17870283321406128128ULL,
		17293822569102704640ULL,		16140901064495857664ULL,		13835058055282163712ULL,		9223372036854775808ULL,
};

static const Int64 MINUSTABLE[] = {
	1ULL,						3ULL,						7ULL,						15ULL,
	31ULL,						63ULL,						127ULL,						255ULL,
	511ULL,						1023ULL,					2047ULL,					4095ULL,
	8191ULL,					16383ULL,					32767ULL,					65535ULL,
	131071ULL,					262143ULL,					524287ULL,					1048575ULL,
	2097151ULL,					4194303ULL,					8388607ULL,					16777215ULL,
	33554431ULL,				67108863ULL,				134217727ULL,				268435455ULL,
	536870911ULL,				1073741823ULL,				2147483647ULL,				4294967295ULL,
	8589934591ULL,				17179869183ULL,				34359738367ULL,				68719476735ULL,
	137438953471ULL,			274877906943ULL,			549755813887ULL,			1099511627775ULL,
	2199023255551ULL,			4398046511103ULL,			8796093022207ULL,			17592186044415ULL,
	35184372088831ULL,			70368744177663ULL,			140737488355327ULL,			281474976710655ULL,
	562949953421311ULL,			1125899906842623ULL,		2251799813685247ULL,		4503599627370495ULL,
	9007199254740991ULL,		18014398509481983ULL,		36028797018963967ULL,		72057594037927935ULL,
	144115188075855871ULL,		288230376151711743ULL,		576460752303423487ULL,		1152921504606846975ULL,
	2305843009213693951ULL,		4611686018427387903ULL,		9223372036854775807ULL,		18446744073709551615ULL,
};